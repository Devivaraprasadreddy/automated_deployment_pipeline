name: Deploy to Amazon ECS new

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ‚úÖ Checkout source code
        uses: actions/checkout@v3

      - name: ‚úÖ Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
          cache-dependency-path: project-2-cicd-pipeline/package-lock.json

      - name: ‚úÖ Install dependencies
        run: npm ci
        working-directory: project-2-cicd-pipeline

      - name: ‚úÖ Run tests (if any)
        run: npm test || echo "No tests found"
        working-directory: project-2-cicd-pipeline

      - name: ‚úÖ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: ‚úÖ Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Debug registry and tag
        run: |
          echo "REGISTRY: $ECR_REGISTRY"
          echo "REPOSITORY: $ECR_REPOSITORY"
          echo "IMAGE TAG: $IMAGE_TAG"
          echo "Full Image: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
  

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG project-2-cicd-pipeline

          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest project-2-cicd-pipeline
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          #push to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
  

      # - name: ‚úÖ Build and push Docker image to ECR
      #   working-directory: project-2-cicd-pipeline
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      #     IMAGE_TAG: ${{ github.sha }}
      #   run: |
      #     docker buildx build project-2-cicd-pipeline \
      #       -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
      #       -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
      #       --push
      #     echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT  

          

          # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: üîç Debug ECS Cluster & Service
        run: |
          echo "ECS_CLUSTER: $ECS_CLUSTER"
          echo "ECS_SERVICE: $ECS_SERVICE"
          echo "AWS_REGION: $AWS_REGION"

          echo "Checking cluster..."
          aws ecs describe-clusters --clusters $ECS_CLUSTER --region $AWS_REGION

          echo "Checking service..."
          aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE --region $AWS_REGION
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
          ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    

      - name: ‚úÖ Deploy to Amazon ECS
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}

      - name: Get Application URL
        run: |
          echo "Waiting for service to stabilize..."
          sleep 30
        
          # Get the public IP of the running task
           TASK_ARN=$(aws ecs list-tasks \
            --cluster $ECS_CLUSTER \
            --service-name $ECS_SERVICE \
            --query 'taskArns[0]' \
            --output text)
        
          if [ "$TASK_ARN" != "None" ] && [ "$TASK_ARN" != "" ]; then
            # Get network interface ID
            NETWORK_INTERFACE_ID=$(aws ecs describe-tasks \
              --cluster $ECS_CLUSTER \
              --tasks $TASK_ARN \
              --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' \
              --output text)
          
            # Get public IP
            PUBLIC_IP=$(aws ec2 describe-network-interfaces \
              --network-interface-ids $NETWORK_INTERFACE_ID \
              --query 'NetworkInterfaces[0].Association.PublicIp' \
              --output text)
          
            echo ""
            echo "üöÄ Deployment successful!"
            echo "üì± Your app is live at: http://$PUBLIC_IP:3001"
            echo "üè• Health check: http://$PUBLIC_IP:3001/health"
            echo "üìä API endpoint: http://$PUBLIC_IP:3001/api/info"
            echo ""
            echo "üìã AWS Console Links:"
            echo "ECS Service: https://console.aws.amazon.com/ecs/home?region=$AWS_REGION#/clusters/$ECS_CLUSTER/services/$ECS_SERVICE"
            echo "CloudWatch Logs: https://console.aws.amazon.com/cloudwatch/home?region=$AWS_REGION#logsV2:log-groups/log-group/%2Fecs%2F$ECS_TASK_DEFINITION"
            echo ""
          else
            echo "‚ùå Could not get task information. Check ECS console for details."
          fi
